package de.thm.mni.compilerbau.phases._02_03_parser;

import java_cup.runtime.*;
import de.thm.mni.compilerbau.utils.*;
import de.thm.mni.compilerbau.absyn.*;
import de.thm.mni.compilerbau.table.Identifier;
import de.thm.mni.compilerbau.utils.SplError;

parser code {:
  public void syntax_error(Symbol currentToken) {
    throw SplError.SyntaxError(new Position(currentToken.left, currentToken.right));
  }
:}

/* Terminals/Tokens */
terminal LBRACK, RBRACK, LPAREN, RPAREN, LCURL, RCURL;         //Braces, parenthesis, brackets
terminal LT, LE, GT, GE, NE, EQ;                               //Comparison operators
terminal PLUS, MINUS, STAR, SLASH;                             //Arithmetic operators
terminal ASGN, COMMA, COLON, SEMIC;                            //Other delimiters
terminal TYPE, PROC, ARRAY, OF, REF, VAR, IF, ELSE, WHILE;     //Keywords

/* Non-terminals */
terminal Identifier IDENT;    //Identifiers
terminal Integer INTLIT;      //Integer literals



non terminal Program program;
non terminal AssignStatement assignStatement;
non terminal plusminus;
non terminal divmulti;
non terminal unaryMinus;
non terminal primaryExpression;
non terminal variableExpression;
non terminal ProcedureDeclaration procedure;
non terminal parameterlist;
non terminal parameter;
non terminal declarationList;
non terminal declaration;
non terminal statement;
non terminal statementList;
non terminal IfStatement ifstatement;
non terminal WhileStatement whileStatement;
non terminal CompoundStatement compundStatement;
non terminal CallStatement callStatement;
non terminal EmptyStatement emptyStatment;
non terminal argList;
non terminal expression;
non terminal typeDeclaration;
non terminal ArrayTypeExpression arrayDeclaration;
non terminal globalDeclarations;


start with program;


program ::= globalDeclarations;

globalDeclarations ::= typeDeclaration globalDeclarations | procedure globalDeclarations | ;

procedure ::= PROC IDENT LPAREN parameterlist RPAREN LCURL declarationList statementList RCURL;

declarationList ::= declaration declarationList | ;
declaration ::= VAR IDENT COLON IDENT SEMIC ;

typeDeclaration ::= TYPE IDENT EQ arrayDeclaration IDENT SEMIC;
arrayDeclaration ::= ARRAY LBRACK expression RBRACK OF arrayDeclaration | ;

statementList ::= statement statementList | emptyStatment;
emptyStatment ::= ;


ifstatement ::= IF:pos LPAREN expression:exp RPAREN statement:thenStm | IF LPAREN expression RPAREN statement ELSE statement ;

statement ::= SEMIC | assignStatement | ifstatement | whileStatement | compundStatement | callStatement;
whileStatement ::= WHILE LPAREN expression RPAREN statement;
compundStatement ::= LCURL statementList RCURL;
callStatement ::= IDENT LPAREN argList RPAREN SEMIC;
// LT, LE, GT, GE, NE, EQ;

expression ::= plusminus LT plusminus | plusminus LE plusminus | plusminus GT plusminus| plusminus GE plusminus| plusminus NE plusminus | plusminus EQ plusminus| plusminus;


argList ::= plusminus | plusminus COMMA argList | ;

parameterlist ::= parameter | parameter COMMA parameter | ;
parameter ::= IDENT COLON IDENT | REF IDENT COLON IDENT;

assignStatement ::= variableExpression ASGN plusminus SEMIC;

plusminus ::= plusminus PLUS divmulti | plusminus MINUS divmulti | divmulti;
divmulti ::= divmulti STAR unaryMinus | divmulti SLASH unaryMinus | unaryMinus;
unaryMinus ::= MINUS  primaryExpression | primaryExpression;
primaryExpression ::= INTLIT | LPAREN plusminus RPAREN | variableExpression ;
variableExpression ::= IDENT | variableExpression LBRACK plusminus RBRACK;
